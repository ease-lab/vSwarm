name: Online Shop End-to-End Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 1"
  push:
    branches: [main]
    paths:
      - 'benchmarks/online_shop/*'
      - "utils/*"
      - "tools/*"
      - "runner/*"

  pull_request:
    branches: [main]
    paths:
      - 'benchmarks/online_shop/*'
      - "utils/*"
      - "tools/*"
      - "runner/*"

env:
  GOOS: linux
  GO111MODULE: on
  PORT: 50000
  KUBECONFIG: /etc/kubernetes/admin.conf

jobs:
  build-and-push:
    name: Build and push all images
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Python version
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Build and push
        working-directory: benchmarks/online_shop/
        env:
          GOPRIVATE_KEY: ${{ secrets.EASE_LAB_ACCESS_KEY }}
        run: |
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
          chmod +x $(go env GOPATH)/bin/*
          export PATH="$PATH:$(go env GOPATH)/bin"
          make all
          make push

  test-compose:
    name: Test Docker Compose
    needs: build-and-push
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        file:
          [
            dc-adservice.yaml,
            dc-cartservice.yaml,
            dc-checkoutservice.yaml,
            dc-currencyservice.yaml,
            dc-emailservice.yaml,
            dc-paymentservice.yaml,
            dc-productcatalogservice.yaml,
            dc-recommendationservice.yaml,
            dc-shippingservice.yaml,
          ]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: start docker-compose benchmark
        working-directory: benchmarks/online_shop/yamls/docker-compose
        run: |
          docker-compose -f ${{ matrix.file }} pull
          docker-compose -f ${{ matrix.file }} up &> log_file &
          sleep 60s
          cat log_file
      - name: invoke the chain
        run: |
          ./tools/bin/grpcurl -plaintext -import-path ./tools/invoker/proto -proto helloworld.proto localhost:50000 helloworld.Greeter.SayHello
      - name: show docker-compose log
        run: cat benchmarks/online_shop/yamls/docker-compose/log_file

  test-knative:
    name: Test Knative Deployment
    needs: build-and-push
    env:
      GOCACHE: /root/tmp/gocache
      GOPATH: /root/tmp/gopath
    runs-on: [self-hosted, stock-knative]
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            kn-adservice,
            kn-cartservice,
            kn-checkoutservice,
            kn-currencyservice,
            kn-emailservice,
            kn-paymentservice,
            kn-productcatalogservice,
            kn-recommendationservice,
            kn-shippingservice,
          ]
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: "true"
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-go@v3
        with:
          go-version: 1.16

      - name: Deploy knative
        working-directory: benchmarks
        run: ../tools/kn_deploy.sh ./online_shop/yamls/knative/${{ matrix.service }}.yaml

      - name: Test invoking once
        working-directory: tools/test-client
        run: |
          set -x
          go build ./test-client.go

          NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          url_list=$(kn service list | awk '$2 ~ /http/ {sub(/http\:\/\//,""); print $2}')
          for url in $url_list
          do
            ./test-client -addr $url:$NODEPORT -name "Example text for Online Shop CI"
          done
      - name: Print logs
        if: ${{ always() }}
        run: |
          set -x
          container_list=$(kubectl get pods -n default -o jsonpath="{.items[*].spec.containers[*].name}")
          for container_name in $container_list
          do
            kubectl logs -n default -c $container_name -l serving.knative.dev/service=${{ matrix.service }}
          done
      - name: Down
        if: ${{ always() }}
        run: kn service delete --all --namespace default --wait
