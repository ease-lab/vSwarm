name: AES End-to-End Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 1"
  push:
    branches: [main]
    paths:
      - "benchmarks/aes/*"
      - "utils/*"
  pull_request:
    branches: [main]
    paths:
      - "benchmarks/aes/*"
      - "utils/*"

env:
  GOOS: linux
  GO111MODULE: on
  KUBECONFIG: /etc/kubernetes/admin.conf

jobs:
  build-and-push:
    name: Build all images
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          lfs: "true"

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Python version
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          
      - name: Set up python dependencies
        working-directory: benchmarks/aes/python
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel
          python3 -m pip install setuptools==49.6.0
          python3 -m pip install ez_setup
          GRPC_PYTHON_BUILD_SYSTEM_ZLIB=true
          python3 -m pip install -r requirements.txt

      - name: Install protoc
        run: |
          PROTOC_ZIP=protoc-3.14.0-linux-x86_64
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/$PROTOC_ZIP.zip
          unzip -o $PROTOC_ZIP.zip -d $HOME/.local
          chmod +x $HOME/.local/bin/protoc
          rm -f $PROTOC_ZIP.zip
      
      - name: Build
        working-directory: benchmarks/aes
        env:
          GOPRIVATE_KEY: ${{ secrets.EASE_LAB_ACCESS_KEY }}
        run: |
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
          ls -l
          ls -l $(go env GOPATH)/bin
          echo $PATH
          export PATH="$PATH:$(go env GOPATH)/bin"
          echo $PATH
          make all_image

  test-compose:
    name: Test Docker Compose
    needs: build-and-push
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        file: [dc-aes-go.yaml,dc-aes-python.yaml,dc-aes-nodejs.yaml,dc-aes-go-tracing.yaml,dc-aes-python-tracing.yaml,dc-aes-nodejs-tracing.yaml]
        include:
          - file: dc-aes-go.yml
            port: 50051
          - file: dc-aes-go-tracing.yml
            port: 50051
          - file: dc-aes-python.yml
            port: 50051
          - file: dc-aes-python-tracing.yml
            port: 50051
          - file: dc-aes-nodejs.yml
            port: 50051
          - file: dc-aes-nodejs-tracing.yml
            port: 50051

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          lfs: "true"

      - name: start docker-compose benchmark
        working-directory: benchmarks/aes/yamls/docker-compose
        run: |
          docker-compose -f ${{ matrix.file }} up &> log_file &
          sleep 60s

      - name: invoke the chain
        run: |
          ./tools/bin/grpcurl -plaintext localhost:${{ matrix.port }} helloworld.Greeter.SayHello

      - name: show docker-compose log
        run: cat benchmarks/aes/yamls/docker-compose/log_file

  test-knative:
    name: Test Knative Deployment
    needs: build-and-push
    env:
      GOCACHE: /root/tmp/gocache
      GOPATH: /root/tmp/gopath
    runs-on: [stock-knative]
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: "true"
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Deploy knative
        working-directory: benchmarks
        run: ../tools/kn_deploy.sh ./aes/yamls/knative/*

      - name: Test invoking once
        working-directory: tools/test-client
        run: |
          set -x

          NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          HOSTNAME=$(kubectl get ksvc driver -n default -o jsonpath='{.status.url}' | cut -c8-)

          go build ./test-client.go
          ./test-client -addr $HOSTNAME:$NODEPORT

      - name: Print logs
        if: ${{ always() }}
        run: |
          set -x
          kubectl logs -n default -c user-container -l serving.knative.dev/service=producer
          kubectl logs -n default -c user-container -l serving.knative.dev/service=consumer
          kubectl logs -n default -c user-container -l serving.knative.dev/service=driver

      - name: Down
        if: ${{ always() }}
        run: kn service delete --all --namespace default --wait
